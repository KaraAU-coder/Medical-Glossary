name: Auto-Update Medical Glossary

on:
  push:
    paths:
      - '*.csv'
      - '**/*.csv'
    branches:
      - main
  workflow_dispatch:

jobs:
  update-glossary:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        npm init -y
        npm install papaparse
        
    - name: Find and use latest CSV file
      run: |
        echo "🔍 Scanning for CSV files..."
        LATEST_CSV=$(ls -t *.csv 2>/dev/null | head -n1)
        if [ -z "$LATEST_CSV" ]; then
          echo "❌ No CSV files found!"
          exit 1
        fi
        echo "📄 Latest CSV file detected: $LATEST_CSV"
        echo "LATEST_CSV_FILE=$LATEST_CSV" >> $GITHUB_ENV
        echo "📊 File details:"
        ls -la "$LATEST_CSV"
        echo "📋 First few lines:"
        head -3 "$LATEST_CSV"
        
    - name: Create processing script
      run: |
        cat > process-csv.js << 'SCRIPT_EOF'
        const fs = require('fs');
        const Papa = require('papaparse');
        
        console.log('📊 Processing medical glossary CSV...');
        
        try {
          const csvFile = process.env.LATEST_CSV_FILE;
          console.log('📖 Reading file:', csvFile);
          
          const csvContent = fs.readFileSync(csvFile, 'utf8');
          
          const parsed = Papa.parse(csvContent, {
            header: true,
            dynamicTyping: true,
            skipEmptyLines: true
          });
          
          if (parsed.errors.length > 0) {
            console.error('❌ CSV parsing errors:', parsed.errors);
            process.exit(1);
          }
          
          const validTerms = parsed.data.filter(row => 
            row['EN Term'] && 
            row['EN Term'].trim() !== '' && 
            row['EN Term'] !== 'EN Term'
          );
          
          console.log(`✅ Validated ${validTerms.length} medical terms`);
          
          const meta = {
            title: 'Medical Glossary 1.0',
            description: 'Multilingual medical dictionary with comprehensive terminology',
            version: '1.0.0',
            lastUpdated: new Date().toISOString(),
            generated: new Date().toISOString(),
            sourceFile: process.env.LATEST_CSV_FILE,
            languages: ['en', 'zh', 'fr'],
            totalTerms: validTerms.length,
            categories: [...new Set(validTerms.map(t => t.Category).filter(Boolean))].sort(),
            buildInfo: {
              buildDate: new Date().toISOString(),
              environment: 'production',
              automation: 'github-actions-auto-detect'
            }
          };
          
          if (!fs.existsSync('data')) {
            fs.mkdirSync('data');
          }
          
          fs.writeFileSync('data/meta.json', JSON.stringify(meta, null, 2));
          console.log('📄 Updated meta.json');
          
          fs.copyFileSync(process.env.LATEST_CSV_FILE, 'medical-glossary.csv');
          console.log('📋 Copied latest CSV to medical-glossary.csv for website');
          
          const summary = `## 📊 Medical Glossary Update Summary
          
        **Date:** ${new Date().toLocaleDateString()}
        **Source File:** ${process.env.LATEST_CSV_FILE}
        **Total Terms:** ${validTerms.length}
        **Categories:** ${meta.categories.length}
        **Languages:** English, Chinese, French

        ### Auto-Detection Results
        - 🔍 Scanned repository for CSV files
        - 📄 Selected: ${process.env.LATEST_CSV_FILE}
        - ✅ Processed ${validTerms.length} medical terms
        - 🔗 Updated medical-glossary.csv for website

        ### Categories Found
        ${meta.categories.map(cat => `- ${cat}`).join('\n')}

        ---
        🌿 **Medical Glossary 1.0** - Auto-updated with latest CSV file!`;
          
          fs.writeFileSync('UPDATE_SUMMARY.md', summary);
          console.log('📋 Generated update summary');
          
        } catch (error) {
          console.error('❌ Error processing CSV:', error.message);
          process.exit(1);
        }
        SCRIPT_EOF
        
    - name: Process CSV file
      run: node process-csv.js
        
    - name: Commit changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add data/meta.json UPDATE_SUMMARY.md medical-glossary.csv
        git diff --staged --quiet || git commit -m "🤖 Auto-update: Process latest CSV file [$LATEST_CSV_FILE] [$(date '+%Y-%m-%d %H:%M')]"
        
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: main
        
    - name: Deploy to GitHub Pages
      run: |
        echo "🚀 GitHub Pages will automatically deploy the updated site"
        echo "✅ Medical Glossary 1.0 update complete!"
        echo "📄 Used source file: $LATEST_CSV_FILE"
