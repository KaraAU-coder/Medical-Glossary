# Medical Glossary Auto-Update Workflow
name: Auto-Update Medical Glossary
cat > .github/workflows/update-glossary.yml << 'EOF'
# Medical Glossary Auto-Update Workflow
name: Auto-Update Medical Glossary

# Trigger when ANY CSV file is added/modified
on:
  push:
    paths:
      - '*.csv'
      - '**/*.csv'
    branches:
      - main
  
  # Allow manual triggering
  workflow_dispatch:

jobs:
  update-glossary:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        npm init -y
        npm install papaparse
        
    - name: Find and use latest CSV file
      run: |
        echo "üîç Scanning for CSV files..."
        
        # Find the most recently modified CSV file
        LATEST_CSV=$(find . -maxdepth 1 -name "*.csv" -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -d' ' -f2)
        
        if [ -z "$LATEST_CSV" ]; then
          echo "‚ùå No CSV files found!"
          exit 1
        fi
        
        echo "üìÑ Latest CSV file detected: $LATEST_CSV"
        echo "LATEST_CSV_FILE=$LATEST_CSV" >> $GITHUB_ENV
        
        # Create/update symlink to point to latest file
        ln -sf "$LATEST_CSV" medical-glossary-current.csv
        echo "üîó Created symlink: medical-glossary-current.csv -> $LATEST_CSV"
        
        # Show file info
        echo "üìä File details:"
        ls -la "$LATEST_CSV"
        echo "üìã First few lines:"
        head -3 "$LATEST_CSV"
        
    - name: Validate and process CSV
      run: |
        node -e "
        const fs = require('fs');
        const Papa = require('papaparse');
        
        console.log('üìä Processing medical glossary CSV...');
        
        try {
          // Read the latest CSV file
          const csvFile = process.env.LATEST_CSV_FILE || 'medical-glossary-current.csv';
          console.log('üìñ Reading file:', csvFile);
          
          const csvContent = fs.readFileSync(csvFile, 'utf8');
          
          // Parse and validate
          const parsed = Papa.parse(csvContent, {
            header: true,
            dynamicTyping: true,
            skipEmptyLines: true
          });
          
          if (parsed.errors.length > 0) {
            console.error('‚ùå CSV parsing errors:', parsed.errors);
            process.exit(1);
          }
          
          const validTerms = parsed.data.filter(row => 
            row['EN Term'] && 
            row['EN Term'].trim() !== '' && 
            row['EN Term'] !== 'EN Term'
          );
          
          console.log(\`‚úÖ Validated \${validTerms.length} medical terms\`);
          
          // Update meta.json with current info
          const meta = {
            title: 'Medical Glossary 1.0',
            description: 'Multilingual medical dictionary with comprehensive terminology',
            version: '1.0.0',
            lastUpdated: new Date().toISOString(),
            generated: new Date().toISOString(),
            sourceFile: process.env.LATEST_CSV_FILE,
            languages: ['en', 'zh', 'fr'],
            totalTerms: validTerms.length,
            categories: [...new Set(validTerms.map(t => t.Category).filter(Boolean))].sort(),
            buildInfo: {
              buildDate: new Date().toISOString(),
              environment: 'production',
              automation: 'github-actions-auto-detect'
            }
          };
          
          // Create data directory if it doesn't exist
          if (!fs.existsSync('data')) {
            fs.mkdirSync('data');
          }
          
          fs.writeFileSync('data/meta.json', JSON.stringify(meta, null, 2));
          console.log('üìÑ Updated meta.json');
          
          // Copy latest CSV to standard name for the website
          fs.copyFileSync(process.env.LATEST_CSV_FILE, 'medical-glossary.csv');
          console.log('üìã Copied latest CSV to medical-glossary.csv for website');
          
          // Generate summary
          const summary = \`## üìä Medical Glossary Update Summary
          
**Date:** \${new Date().toLocaleDateString()}
**Source File:** \${process.env.LATEST_CSV_FILE}
**Total Terms:** \${validTerms.length}
**Categories:** \${meta.categories.length}
**Languages:** English, Chinese, French

### Auto-Detection Results
- üîç Scanned repository for CSV files
- üìÑ Selected: \${process.env.LATEST_CSV_FILE}
- ‚úÖ Processed \${validTerms.length} medical terms
- üîó Updated medical-glossary.csv for website

### Categories Found
\${meta.categories.map(cat => \`- \${cat}\`).join('\\n')}

---
üåø **Medical Glossary 1.0** - Auto-updated with latest CSV file!

> **How it works:** Drop any CSV file (like june2update.csv) into the repository, and the system automatically detects and uses the newest one!\`;
          
          fs.writeFileSync('UPDATE_SUMMARY.md', summary);
          console.log('üìã Generated update summary');
          
        } catch (error) {
          console.error('‚ùå Error processing CSV:', error.message);
          process.exit(1);
        }
        "
        
    - name: Commit changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add data/meta.json UPDATE_SUMMARY.md medical-glossary.csv medical-glossary-current.csv
        git diff --staged --quiet || git commit -m "ü§ñ Auto-update: Process latest CSV file [$LATEST_CSV_FILE] [$(date '+%Y-%m-%d %H:%M')]"
        
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: main
        
    - name: Deploy to GitHub Pages
      run: |
        echo "üöÄ GitHub Pages will automatically deploy the updated site"
        echo "‚úÖ Medical Glossary 1.0 update complete!"
        echo "üìÑ Used source file: $LATEST_CSV_FILE"
